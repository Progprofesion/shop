4. useState – управление состоянием (испольузется повсеместо, чаще использую как локальное состояние или когда нет хранилища)
useEffect – побочные эффекты(тоже применяется повсеместно, срабатывает в зависимости от преданных значений)
useContext – доступ к контексту(использую редко)
useRef – доступ к DOM (для получения элемнтов DOM, также подойдет для хранния изменяемых значений)
6.Довольно много занимался оптимизацией ( хуки : useMemo — для "запоминания" тяжелых вычислений (фильтрация, сортировка, математические оперции) React.memo — чтобы не перерендеривать компонент, если его пропсы не изменились)
useCallback — для сохранения ссылки на функцию между рендерами, что бы при каждом рендере не пересоздавать функцию заного.
7.С api работал всвозможными способами стандартынй fetch axios React query и даже JSON-RPC. Кешировал как используя встроенный функционал библиотек так и используя например localStorage как предзагрузку и персистентность.  
8. Чаще всего использую useNavigate – для навигации(оч удобно потмоу что сохраняет историю навигации, можно например вернутся назад)
useLocation – доступ к объекту местоположения( для получения пути например const location = useLocation(); location.pathname)
useSearchParams – работа с query-параметрами(например когда в пути приходит данные фильтрации)
9. Для стилизации предпочитаю scss, но также понимаю materia ui 
и немного писал на tailwind
10. Развертвыванием у нас занимается отдельны человек поэтому много развертывать и деплоить не приходилось, не считая использывания настроенного pipline. Также есть небольшой опыт работы с docker. 
